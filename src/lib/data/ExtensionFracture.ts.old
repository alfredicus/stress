import { Matrix3x3, scalarProductUnitVectors, Vector3 } from "../types"
import { fromAnglesToNormal } from "../utils/fromAnglesToNormal"
import { Data } from "./Data"
import { FractureStrategy, Tokens } from "./types"
import { Direction } from "../utils"
import { HypotheticalSolutionTensorParameters } from "../geomeca"
import { createDataArgument, createDataStatus, DataArgument, DataDescription, DataStatus } from "./DataDescription"
import { DataFactory } from "./Factory"

/**
 * @brief Represent an observed and measured joint
 * 
 * An extension fracture is represented by a  Its orientation in space is definedby three parameters, as follows:
 *      Strike: clockwise angle measured from the North direction [0, 360)
 *      Dip: vertical angle, measured downward, between the horizontal and the line of greatest slope in an inclined plane [0, 90]
 *      Dip direction: (N, E, S, W) or a combination of two directions (NE, SE, SW, NW).
 *
 * @category Data
 */
export class ExtensionFracture extends Data {
    protected nPlane: Vector3 = undefined
    protected strategy: FractureStrategy = FractureStrategy.ANGLE

    /*
    description(): any {
        return {
            // Mandatory data: 
            // 0, 1    =  Data number, data type (Extension Fracture and inheriting class: Dilation Band)
            // ------------------------------
            // Plane orientation : 
            // 2, 3, 4 = Strike, dip, dip direction
            mandatory: [2, 3, 4],
            // Optional data:
            // 11, 12 = Deformation phase, relative weight 
            optional: [11, 12]
        }
    }
    */

    initialize(args: Tokens[]): DataStatus {
        const toks = args[0]
        const result = createDataStatus()
        const arg: DataArgument = createDataArgument()
        
        // -----------------------------------

        const strike = DataDescription.getParameter(arg.setIndex(2))
        
        const dip = DataDescription.getParameter(arg.setIndex(3))

        // -----------------------------------
 
        // Check consistency of the dip direction

        let dipDirIsUND = false
        let dipDirIsEmptySet = false
    
        if ( isDefined(arg.toks[4]) ) {
            // The dip direction is defined 
            dipDirection = DataDescription.getParameter(arg.setIndex(4))
    
            if (dipDirection !== Direction.E && dipDirection !== Direction.W && dipDirection !== Direction.N && dipDirection !== Direction.S ) {
                if (dipDirection !== Direction.NE && dipDirection !== Direction.SE && dipDirection !== Direction.SW && dipDirection !== Direction.NW ) {
                    // The dip direction is a valid geographic direction: 'E', 'W', 'N', 'S', 'NE', 'SE', 'SW', 'NW'
                    //      i.e., strike direction is an element of set (E, W, N, S, NE, SE, SW, NW)
                    dipDirIsGeographicDir = true
                }
                else if ( dipDirection === Direction.UND) {
                    // The dip direction is undefined (UND) 
                    dipDirIsUND = true
                }
                else {
                    // The dip direction is not a valid string 
                    result.status = false
                    result.messages.push(`Data number ${arg.toks[0]}, ${arg.toks[1]}, plane parameters: please define the dip direction (col 4) from set (E, W, N, S, NE, SE, SW, NW, UND)`)
                }
            }
        }  else {
            // dip direction is not defined (i.e., empty set)
            dipDirIsEmptySet = true
        }
    
        if ( dip > 0 && dip < 90  ) {
            // General case: the plane is neither horizontal nor vertical 

            if ( dipDirIsEmptySet ) {
                // The dip direction cannot be the empty set
                result.status = false
                result.messages.push(`Data number ${arg.toks[0]}, ${arg.toks[1]}, plane parameter: the dip direction (col 4) is not the empty string; please define the dip direction (col 4) from set (E, W, N, S, NE, SE, SW, NW)`)
            
            } else if ( dipDirIsUND ) {
                // The dip direction must be defined in terms of a geographic direction (i.e., it cannot be undefined - UND)
                result.status = false
                result.messages.push(`Data number ${arg.toks[0]}, ${arg.toks[1]}, plane parameter: the dip direction (col 4) is not undefined (UND); please define the dip direction (col 4) from set (E, W, N, S, NE, SE, SW, NW)`)
            
            } else if ( !dipDirIsGeographicDir ) {
                // In principle this else if is never reached as the geographic direction has already been checked for the dip direction parameter
                result.status = false
                result.messages.push(`Data number ${arg.toks[0]}, ${arg.toks[1]}, plane parameter: please define the dip direction (col 4) from set (E, W, N, S, NE, SE, SW, NW)`)
            }  

        } else if ( dipDirection !== Direction.UND ) {
                // For horizontal and vertical planes, the dip direction is either undefined (UND) or not defined (the empty set)

            if ( !dipDirIsUND && !dipDirIsEmptySet ) {
                result.status = false
                result.messages.push(`Data number ${arg.toks[0]}, ${arg.toks[1]}, plane parameter: for a horizontal plane, please set the dip direction (col 4) as undefined (UND) or non defined (empty string)`)
            }
        }  

        if ( dipDirIsEmptySet ) {
            // Dip direction is not defined (i.e., empty set)
            // This value is equivalent to undefined (UND) in subsequent methods and functions ()
            dipDirection = Direction.UND
        }
        // -----------------------------------

        // Calculate the unit vector normal to the Plane
        this.nPlane = fromAnglesToNormal({strike, dip, dipDirection})

        return result
    }
   
    check({displ, strain, stress}:{displ: Vector3, strain: Matrix3x3, stress: Matrix3x3}): boolean {
        return stress !== undefined
    }

    // This version does not consider the case in which the stress shape ratio R is close to zero (i.e., Sigma 2 = Sigma 3).
    //      In this particular situation, any extension fracture containing Sigma 1 is consistent with the hypothetical stress tensor solution.
    //      In other words, the extension fracture normal is in the plane generated by (Sigma 2, Sigma 3)
    cost({displ, strain, stress}:{displ: Vector3, strain: HypotheticalSolutionTensorParameters, stress: HypotheticalSolutionTensorParameters}): number {
        const dot = scalarProductUnitVectors({U: stress.S3_Y, V: this.nPlane})

        switch(this.strategy) {
            case FractureStrategy.DOT: return 1 - Math.abs(dot)
            // Sigma 1 can be oriented in two opposite directions, thus to calculate the minimum angle we take the dot product as positive.
            default: return Math.acos( Math.abs(dot) ) / Math.PI
        }
    }
}
