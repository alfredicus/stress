import { Matrix3x3, scalarProductUnitVectors, Vector3 } from "../types"
import { fromAnglesToNormal } from "../utils/fromAnglesToNormal"
import { Data } from "./Data"
import { DataParameters } from './DataParameters'
import { DataArguments, FractureStrategy } from "./types"
import { TensorParameters } from "../geomeca"
import { Direction, getDirectionFromString, toFloat } from "../utils"
import { DataDescription, DataMessages } from "./DataDescription"

/**
 * 
 * A styloliye interface is represented by a plane. Its orientation in space is defined by three parameters, as follows:
 *      Strike: clockwise angle measured from the North direction [0, 360)
 *      Dip: vertical angle, measured downward, between the horizontal and the line of greatest slope in an inclined plane [0, 90]
 *      Dip direction: (N, E, S, W) or a combination of two directions (NE, SE, SW, NW).
 *
 * The misfit value is calculated from the angle between vector 'normal' parallel to crystal fibers and the extensional stress axis Sigma 1.
 * 'normal' is computed through the private method CrystalFibersInVeinSphericalCoords.
 * @category Data
 */
  
 export class StyloliteInterface extends Data {
    protected normal: Vector3 = [0,0,0]
    protected strategy: FractureStrategy = FractureStrategy.ANGLE

    // description(): any {
    //     return {
    //         // Mandatory data: 
    //         // 0, 1    = Data number, data type (Stylolite Interface and inheriting class: Compaction Band)
    //         // ------------------------------
    //         // Plane orientation : 
    //         // 2, 3, 4 = Strike, dip, dip direction
    //         mandatory: [2, 3, 4],
    //         // Optional data:
    //         // 11, 12  = Deformation phase, relative weight 
    //         optional: [11, 12]
    //     }
    // }

    initialize(args: DataArguments): DataMessages {
        const toks = args[0]
        const result = { status: true, messages: [] }
        
        // -----------------------------------

        const strike = toFloat(toks[2])
        if (!DataDescription.checkRanges(strike)) {
            DataDescription.putMessage(toks, 2, this, result)
        }

        // -----------------------------------

        const dip = toFloat(toks[3])
        if (!DataDescription.checkRanges(dip)) {
            DataDescription.putMessage(toks, 3, this, result)
        }

        // -----------------------------------

        let dipDirection = Direction.UNKOWN
        if ( (dip !== 90) && (dip !== 0) ) {
            // In the general case, the dip direction for non-horizontal and non-vertical planes
            // must be defined in terms of a geographic direction: N, S, E, W, NE, SE, SW, NW
            if (!DataDescription.checkRanges(toks[4])) {
                DataDescription.putMessage(toks, 4, this, result)
            }
            else {
                dipDirection = getDirectionFromString(toks[4])
                if (dipDirection === Direction.UNKOWN) {
                    throw new Error('Set dip direction for ' + toks[1] + ' ' + toks[0])
                }
            }
        }
        else {
        }

        // Convert into normal
        this.normal = fromAnglesToNormal({strike, dip, dipDirection})

        return result
    }

    check({displ, strain, stress}:{displ: Vector3, strain: Matrix3x3, stress: Matrix3x3}): boolean {
        return stress !== undefined
    }

    // This version does not consider the case in which the stress shape ratio R is close to 1 (i.e., Sigma 2 = Sigma 1) 
    //      In this particular situation, any styloliye interface containing Sigma 3 is consistent with the hypothetical stress tensor solution.
    //      In other words, the styloliye interface normal is in the plane generated by (Sigma 1, Sigma 2)
    cost({displ, strain, stress}:{displ: Vector3, strain: TensorParameters, stress: TensorParameters}): number {
        const dot = scalarProductUnitVectors({U: stress.S1_Xh, V: this.normal})

        switch(this.strategy) {
            case FractureStrategy.DOT: return 1 - Math.abs(dot)
            // Sigma 1 can be oriented in two opposite directions, thus to calculate the minimum angle we take the dot product as positive.
            default: return Math.acos( Math.abs(dot) ) / Math.PI
        }
    }



    /*
    cost({displ, strain, stress}:{displ: Vector3, strain: Matrix3x3, stress: Matrix3x3}): number {
        //      and any plane containing Sigma 3 is consistent with the stress tensor solution

        // [xx, xy, xz, yy, yz, zz]
        const sigma = [stress[0][0], stress[0][1], stress[0][2], stress[1][1], stress[1][2], stress[2][2]]
        // eigen = function calculating the 3 normalized eigenvectors (Sigma_1, Sigma_2, Sigma_3) of the stress tensor ??
        // vectors is formated like: [S1x, S1y, S1z, S2x..., S3z]
        const {values, vectors} = eigen(sigma)
        const sigma1 = [vectors[0], vectors[1], vectors[2]] as Vector3
        
        const dot = scalarProductUnitVectors({U: sigma1, V: this.normal})

        switch(this.strategy) {
            case FractureStrategy.DOT: return 1 - Math.abs(dot)
            // Sigma 1 can be oriented in two opposite directions, thus to calculate the minimum angle we take the dot product as positive.
            default: return Math.acos( Math.abs(dot) ) / Math.PI
        }
    }
    */


}
